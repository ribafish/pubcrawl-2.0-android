{"version":3,"sources":["node_modules/browser-pack/_prelude.js","policies-gui.js","src/admin/PoliciesGUI.js","src/admin/PoliciesManager.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","policiesGui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_PoliciesManager","_PoliciesManager2","PoliciesGUI","policyEngine","_this","policiesManager","elements","_setElements","$","on","event","parent","postMessage","body","method","to","removeClass","document","getElementsByTagName","style","_goHome","addClass","openModal","_manageGroups","_this2","group","closest","id","html","member","val","addToGroup","_this3","groupName","createGroup","_this4","off","policyTitle","createPolicy","closeModal","splitId","split","thisPriority","parseInt","pop","join","lastPriority","getPolicy","getLastPriority","newPriority","decreaseRulePriority","removeFromGroup","children","deleteGroup","deletePolicy","priority","rule","getRuleOfPolicy","deleteRule","_this5","activeUserPolicy","getActivePolicy","radio","policies","getPoliciesTitles","textContent","updateActivePolicy","title","keys","scopes","lists","list","j","variable","info","find","indexOf","splitInfo","substring","months","_splitInfo","text","undefined","items","numItems","options","_this6","getFormattedPolicies","policiesTitles","rulesTitles","ids","push","table","isEmpty","_i","append","_showVariablesTypes","_deleteRule","_showRule","_increaseRulePriority","_decreaseRulePriority","_createPolicy","_deletePolicy","_getActivePolicy","_getPoliciesTable","increaseRulePriority","_this7","groupsPE","getGroups","groups","groupsNames","members","_addMember","_deleteMember","_createGroup","_deleteGroup","_this8","date","params","select","_getOptions","form","_getNewConfiguration","empty","getMyEmails","getMyHyperties","_getGroupOptions","_this9","variables","getVariables","_getList","_showNewConfigurationPanel","_this10","getVariableInfo","description","tags","input","getGroupsNames","pickadate","selectMonths","selectYears","getElementById","checked","_info","_getInfo","decision","scope","setInfo","resourceType","shift","condition","deleteInfo","_this11","ruleTitle","attribute","element","authorise","_updateRule","type","splitTitle","index","newDecision","updatePolicy","newSubscriptionType","labels","./PoliciesManager",2,"PoliciesManager","context","setVariables","addition","setAdditionMethods","validation","setValidationMethods","user","addPolicy","savePolicies","removePolicy","userPolicies","titles","targets","Date","Domain","Group of users","Subscription preferences","Time of the day","Weekday","createRule","operator","start","end","weekdays","isValidDate","isValidScope","isValidString","isValidDomain","isValidSubscriptionType","isValidTimeslot","saveActivePolicy","pattern","test","infoSplit","day","month","year","isValidFormat","getFullYear","getMonth","getDate","now","isFuture","twoTimes","splitStart","splitEnd","okSize","areIntegers","policiesPE","policiesGUI","policy","rules","sortRules","_getTitle","getRuleByPriority","weekdayID","variablesTitles","getList","conditionSplit","deletion","getGroup","groupsGUI"],"mappings":"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","file":"policies-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.policiesGui = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _PoliciesManager = require('./PoliciesManager');\n\nvar _PoliciesManager2 = _interopRequireDefault(_PoliciesManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PoliciesGUI = function () {\n  function PoliciesGUI(policyEngine) {\n    var _this = this;\n\n    _classCallCheck(this, PoliciesGUI);\n\n    if (!policyEngine) throw Error('Policy Engine is not set!');\n    this.policiesManager = new _PoliciesManager2.default(policyEngine);\n    this.elements = this._setElements();\n\n    $('.settings-btn').on('click', function (event) {\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').removeClass('hide');\n      document.getElementsByTagName('body')[0].style = 'background-color:white;';\n    });\n\n    $('.policies-page-show').on('click', function (event) {\n      $('.policies-section').removeClass('hide');\n      _this._goHome();\n    });\n\n    $('.admin-page-exit').on('click', function (event) {\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').addClass('hide');\n      document.getElementsByTagName('body')[0].style = 'background-color:transparent;';\n    });\n\n    $('.group-management-btn').on('click', function (event) {\n      $('.groups-management-modal').openModal();\n      _this._manageGroups();\n    });\n\n    $('.exit-btn').on('click', function (event) {\n      $('.subscription-type').addClass('hide');\n    });\n  }\n\n  _createClass(PoliciesGUI, [{\n    key: '_addMember',\n    value: function _addMember() {\n      var _this2 = this;\n\n      $('.groups-show').addClass('hide');\n      var group = event.target.closest('tr').id;\n      $('.member-new-intro').html('<h5>Add a member to a group</h5><p>Insert a user email below to add to the \"' + group + '\" group.</p>');\n      $('.member-new').removeClass('hide');\n      $('.member-new-ok').on('click', function (event) {\n        var member = $('#member-new').val();\n        _this2.policiesManager.addToGroup(group, member);\n        _this2._manageGroups();\n      });\n    }\n  }, {\n    key: '_createGroup',\n    value: function _createGroup() {\n      var _this3 = this;\n\n      $('.groups-show').addClass('hide');\n      $('#group-new-name').val('');\n      $('.group-new').removeClass('hide');\n      $('.group-new-ok').on('click', function (event) {\n        var groupName = $('#group-new-name').val();\n        _this3.policiesManager.createGroup(groupName);\n        _this3._manageGroups();\n      });\n    }\n  }, {\n    key: '_createPolicy',\n    value: function _createPolicy() {\n      var _this4 = this;\n\n      $('#policy-new-title').val('');\n      $('.policy-new').openModal();\n      $('.policy-new-ok').off();\n      $('.policy-new-ok').on('click', function (event) {\n        var policyTitle = $('#policy-new-title').val();\n        _this4.policiesManager.createPolicy(policyTitle);\n        $('.policy-new').closeModal();\n        _this4._goHome();\n      });\n    }\n  }, {\n    key: '_decreaseRulePriority',\n    value: function _decreaseRulePriority() {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var thisPriority = parseInt(splitId[splitId.length - 1]);\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      var lastPriority = this.policiesManager.getPolicy(policyTitle).getLastPriority();\n      if (lastPriority != thisPriority) {\n        var newPriority = parseInt(thisPriority + 1);\n        this.policiesManager.decreaseRulePriority(policyTitle, thisPriority, newPriority);\n        this._goHome();\n      }\n    }\n  }, {\n    key: '_deleteMember',\n    value: function _deleteMember() {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split('::');\n      var member = splitId[splitId.length - 1];\n      splitId.pop();\n      var group = splitId.join('::');\n      this.policiesManager.removeFromGroup(group, member);\n      this._manageGroups();\n    }\n  }, {\n    key: '_deleteGroup',\n    value: function _deleteGroup() {\n      var groupName = event.target.closest('tr').children[0].id;\n      this.policiesManager.deleteGroup(groupName);\n      this._manageGroups();\n    }\n  }, {\n    key: '_deletePolicy',\n    value: function _deletePolicy() {\n      var policyTitle = event.target.closest('tr').id;\n      this.policiesManager.deletePolicy(policyTitle);\n      this._goHome();\n    }\n  }, {\n    key: '_deleteRule',\n    value: function _deleteRule() {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var priority = splitId[splitId.length - 1];\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      var rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n\n      this.policiesManager.deleteRule(policyTitle, rule);\n      this._goHome();\n    }\n  }, {\n    key: '_getActivePolicy',\n    value: function _getActivePolicy() {\n      var _this5 = this;\n\n      $('.policy-active').html('');\n      var activeUserPolicy = this.policiesManager.getActivePolicy();\n      var radio = '<form\">';\n      var policies = this.policiesManager.getPoliciesTitles();\n      for (var i in policies) {\n        if (policies[i] === activeUserPolicy) {\n          radio += '<p><input name=\"policies-list\" type=\"radio\" id=\"' + policies[i] + '\" checked/><label for=\"' + policies[i] + '\" class=\"policies-list black-text\">' + policies[i] + '</label></p>';\n        } else {\n          radio += '<p><input name=\"policies-list\" type=\"radio\" id=\"' + policies[i] + '\"/><label for=\"' + policies[i] + '\" class=\"policies-list black-text\">' + policies[i] + '</label></p>';\n        }\n      }\n\n      radio += '</form>';\n\n      if (policies.length > 0) {\n        $('.policy-active').html('<p><b>Activate a policy:</b></p>' + radio);\n      }\n\n      $('.policies-list').on('click', function (event) {\n        var policyTitle = event.target.textContent;\n        _this5.policiesManager.updateActivePolicy(policyTitle);\n      });\n    }\n  }, {\n    key: '_getGroupOptions',\n    value: function _getGroupOptions(title, keys, scopes, lists) {\n      var list = '<option disabled selected>' + title + '</option>';\n\n      for (var i in keys) {\n        list += '<optgroup label=' + keys[i] + '>';\n        for (var j in lists[i]) {\n          list += '<option id=\"' + scopes[i] + '\">' + lists[i][j] + '</option>';\n        }\n      }\n\n      return list;\n    }\n  }, {\n    key: '_getInfo',\n    value: function _getInfo(variable) {\n      var info = void 0;\n\n      switch (variable) {\n        case 'Date':\n          info = $('.config').find('input').val();\n          if (info.indexOf(',') !== -1) {\n            //20 July, 2016\n            var splitInfo = info.split(' '); //['20', 'July,',' '2016']\n            splitInfo[1] = splitInfo[1].substring(0, splitInfo[1].length - 1); //'July'\n            var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n            info = splitInfo[0] + '/' + (months.indexOf(splitInfo[1]) + 1) + '/' + splitInfo[2];\n          } else {\n            // 2016-07-20\n            var _splitInfo = info.split('-');\n            info = _splitInfo[2] + '/' + _splitInfo[1] + '/' + _splitInfo[0];\n          }\n          break;\n        case 'Groups of users':\n          info = $('#group').find(\":selected\").text();\n          break;\n        case 'Subscription preferences':\n          if (info = $(\"input[name='rule-new-subscription']:checked\")[0] !== undefined) {\n            info = $(\"input[name='rule-new-subscription']:checked\")[0].id;\n          }\n          break;\n        case 'Weekday':\n          info = $('#weekday').find(\":selected\").text();\n          break;\n        default:\n          info = $('.config').find('input').val();\n          break;\n      }\n\n      return info;\n    }\n  }, {\n    key: '_getList',\n    value: function _getList(items) {\n      var list = '';\n      var numItems = items.length;\n\n      for (var i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n  }, {\n    key: '_getOptions',\n    value: function _getOptions(id, title, list) {\n      var options = '<select id=\"' + id + '\" class=\"browser-default\"><option disabled selected>' + title + '</option>';\n\n      for (var i in list) {\n        options += '<option>' + list[i] + '</option>';\n      }\n      options += '</select>';\n\n      return options;\n    }\n  }, {\n    key: '_getPoliciesTable',\n    value: function _getPoliciesTable() {\n      var _this6 = this;\n\n      $('.policies-current').html('');\n\n      var policies = this.policiesManager.getFormattedPolicies();\n      var policiesTitles = [];\n      var rulesTitles = [];\n      var ids = [];\n\n      for (var i in policies) {\n        policiesTitles.push(policies[i].title);\n        rulesTitles.push(policies[i].rulesTitles);\n        ids.push(policies[i].ids);\n      }\n\n      var table = '<table>';\n      var isEmpty = policiesTitles.length === 0;\n\n      for (var _i in policiesTitles) {\n        table += '<thead><tr id=\"' + policiesTitles[_i] + '\"><td></td><td></td><th>' + policiesTitles[_i] + '</th><td><i class=\"material-icons clickable-cell policy-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n        for (var j in rulesTitles[_i]) {\n          table += '<tr id=\"' + ids[_i][j] + '\" ><td><i class=\"material-icons clickable-cell rule-priority-increase\" style=\"cursor: pointer; vertical-align: middle\">arrow_upward</i></td><td><i class=\"material-icons clickable-cell rule-priority-decrease\" style=\"cursor: pointer; vertical-align: middle\">arrow_downward</i></td><td class=\"rule-show clickable-cell\" style=\"cursor: pointer\">' + rulesTitles[_i][j] + '</td><td><i class=\"material-icons clickable-cell rule-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n        }\n        table += '<tr id=\"' + policiesTitles[_i] + '\"><td></td><td></td><td style=\"text-align:center\"><i class=\"material-icons clickable-cell rule-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n      }\n      if (!isEmpty) {\n        table += '</tbody></table>';\n        $('.policies-current').append(table);\n      } else {\n        $('.policies-current').append('<p>There are no configurations set.</p>');\n      }\n      $('.rule-add').on('click', function (event) {\n        _this6._showVariablesTypes();\n      });\n      $('.rule-delete').on('click', function (event) {\n        _this6._deleteRule();\n      });\n      $('.rule-show').on('click', function (event) {\n        _this6._showRule();\n      });\n      $('.rule-priority-increase').on('click', function (event) {\n        _this6._increaseRulePriority();\n      });\n      $('.rule-priority-decrease').on('click', function (event) {\n        _this6._decreaseRulePriority();\n      });\n      $('.policy-add').off();\n      $('.policy-add').on('click', function (event) {\n        _this6._createPolicy();\n      });\n      $('.policy-delete').on('click', function (event) {\n        _this6._deletePolicy();\n      });\n    }\n  }, {\n    key: '_goHome',\n    value: function _goHome() {\n      this._getActivePolicy();\n      this._getPoliciesTable();\n    }\n  }, {\n    key: '_increaseRulePriority',\n    value: function _increaseRulePriority() {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var thisPriority = parseInt(splitId[splitId.length - 1]);\n      if (thisPriority !== 0) {\n        splitId.pop();\n        var policyTitle = splitId.join(':');\n        var newPriority = thisPriority - 1;\n\n        this.policiesManager.increaseRulePriority(policyTitle, thisPriority, newPriority);\n        this._goHome();\n      }\n    }\n  }, {\n    key: '_manageGroups',\n    value: function _manageGroups() {\n      var _this7 = this;\n\n      $('.groups-current').html('');\n      $('.group-new').addClass('hide');\n      $('.member-new').addClass('hide');\n      $('.groups-show').removeClass('hide');\n      var groupsPE = this.policiesManager.getGroups();\n      var groups = groupsPE.groupsNames;\n      var members = groupsPE.members;\n      var ids = groupsPE.ids;\n\n      var table = '<table>';\n      var isEmpty = groups.length === 0;\n\n      for (var i in groups) {\n        table += '<thead><tr><th id=\"' + groups[i] + '\">' + groups[i] + '</th><td style=\"text-align:right\"><i class=\"material-icons clickable-cell group-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n        for (var j in members[i]) {\n          table += '<tr id=\"' + ids[i][j] + '\" ><td style=\"cursor: pointer\">' + members[i][j] + '</td><td style=\"text-align:right\"><i class=\"material-icons clickable-cell member-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n        }\n\n        table += '<tr id=\"' + groups[i] + '\"><td><i class=\"material-icons clickable-cell member-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n      }\n\n      if (!isEmpty) {\n        table += '</tbody></table>';\n        $('.groups-current').append(table);\n      } else {\n        $('.groups-current').append('<p>There are no groups set.</p>');\n      }\n\n      $('.member-add').on('click', function (event) {\n        _this7._addMember();\n      });\n      $('.member-delete').on('click', function (event) {\n        _this7._deleteMember();\n      });\n      $('.group-add').on('click', function (event) {\n        _this7._createGroup();\n      });\n      $('.group-delete').on('click', function (event) {\n        _this7._deleteGroup();\n      });\n    }\n  }, {\n    key: '_setElements',\n    value: function _setElements() {\n      var _this8 = this;\n\n      return {\n        date: function date(params) {\n          return '<input type=\"date\" class=\"datepicker\">';\n        },\n        select: function select(params) {\n          return _this8._getOptions(params[0], params[1], params[2]);\n        },\n        form: function form(params) {\n          return '<form><input type=\"text\" placeholder=\"' + params + '\"></input></form>';\n        }\n      };\n    }\n  }, {\n    key: '_showNewConfigurationPanel',\n    value: function _showNewConfigurationPanel(policyTitle) {\n      var variable = event.target.text;\n      $('.variable').html(this._getNewConfiguration(policyTitle, variable));\n      $('.scopes').empty().html('');\n\n      var keys = ['Email', 'Hyperty', 'All'];\n      var scopes = ['user', 'hyperty', 'global'];\n      var lists = [];\n\n      lists.push(this.policiesManager.getMyEmails());\n      lists.push(this.policiesManager.getMyHyperties());\n      lists.push(['All identities and hyperties']);\n      $('.scopes').append(this._getGroupOptions('Apply this configuration to:', keys, scopes, lists));\n      $('.variable').removeClass('hide');\n    }\n  }, {\n    key: '_showVariablesTypes',\n    value: function _showVariablesTypes() {\n      var _this9 = this;\n\n      var policyTitle = event.target.closest('tr').id;\n\n      $('#variables-types').empty().html('');\n      var variables = this.policiesManager.getVariables();\n      $('#variables-types').append(this._getList(variables));\n      $('.variable').addClass('hide');\n      $('.rule-new').openModal();\n      $('#variables-types').off();\n      $('#variables-types').on('click', function (event) {\n        _this9._showNewConfigurationPanel(policyTitle);\n      });\n    }\n  }, {\n    key: '_getNewConfiguration',\n    value: function _getNewConfiguration(policyTitle, variable) {\n      var _this10 = this;\n\n      var info = this.policiesManager.getVariableInfo(variable);\n      $('.rule-new-title').html(info.title);\n      $('.description').html(info.description);\n      $('.config').html('');\n\n      if (variable === 'Subscription preferences') {\n        $('.subscription-type').removeClass('hide');\n      } else {\n        $('.subscription-type').addClass('hide');\n        var tags = info.input;\n        for (var i in tags) {\n          if (variable === 'Group of users') {\n            tags[i][1].push(this.policiesManager.getGroupsNames());\n          }\n          $('.config').append(this.elements[tags[i][0]](tags[i][1]));\n          if (variable === 'Group of users') {\n            tags[i][1].pop();\n          }\n        }\n        if (variable === 'date') {\n          $('.datepicker').pickadate({\n            selectMonths: true,\n            selectYears: 15\n          });\n        }\n      }\n      document.getElementById('allow').checked = false;\n      document.getElementById('block').checked = false;\n      $('.ok-btn').off();\n      $('.ok-btn').on('click', function (event) {\n        if ($(\"input[name='rule-new-decision']:checked\")[0] !== undefined) {\n          var _info = _this10._getInfo(variable);\n          var decision = $(\"input[name='rule-new-decision']:checked\")[0].id;\n          decision = decision === 'allow';\n          var scope = $('.scopes').find(\":selected\")[0].id;\n          var target = $('.scopes').find(\":selected\")[0].textContent;\n          target = target === 'All identities and hyperties' ? 'global' : target;\n          _this10.policiesManager.setInfo(variable, policyTitle, _info, decision, scope, target);\n          $('.rule-new').closeModal();\n          _this10._goHome();\n        } else {\n          throw Error('INFORMATION MISSING: please specify an authorisation decision.');\n        }\n      });\n    }\n  }, {\n    key: '_deleteInfo',\n    value: function _deleteInfo(resourceType) {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var scope = splitId[0];\n      splitId.shift();\n      var target = splitId.join('');\n      var condition = event.target.closest('tr').children[0].id;\n      this.policiesManager.deleteInfo(resourceType, scope, target, condition);\n      this._goHome();\n    }\n  }, {\n    key: '_showRule',\n    value: function _showRule() {\n      var _this11 = this;\n\n      var ruleTitle = event.target.textContent;\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var priority = splitId[splitId.length - 1];\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      var rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n      if (rule.condition.attribute === 'subscription' && rule.condition.params === 'preauthorised') {\n        $('.authorise-btns').addClass('hide');\n      } else {\n        var element = void 0;\n        if (rule.authorise) {\n          element = document.getElementById('btn-allow');\n        } else {\n          element = document.getElementById('btn-block');\n        }\n        element.checked = true;\n        $('.authorise-btns').removeClass('hide');\n      }\n      $('.member-add').addClass('hide');\n      $('.member-new-btn').addClass('hide');\n\n      $('.rule-details').openModal();\n      $('.rule-title').html('<h5><b>' + ruleTitle + '</b></h5>');\n      if (rule.condition.attribute === 'subscription') {\n        $('.subscription-type').removeClass('hide');\n      }\n      $('.subscription-decision').on('click', function (event) {\n        _this11._updateRule('subscription', policyTitle, rule);\n      });\n      $('.decision').off();\n      $('.decision').on('click', function (event) {\n        _this11._updateRule('authorisation', policyTitle, rule);\n      });\n    }\n  }, {\n    key: '_updateRule',\n    value: function _updateRule(type, policyTitle, rule) {\n      var title = $('.rule-title').text();\n      var splitTitle = title.split(' ');\n      var index = splitTitle.indexOf('is');\n      if (index === -1) {\n        index = splitTitle.indexOf('are');\n      }\n      switch (type) {\n        case 'authorisation':\n          var newDecision = $(\"input[name='rule-update-decision']:checked\")[0].id;\n          if (newDecision === 'btn-allow') {\n            splitTitle[index + 1] = 'allowed';\n            newDecision = true;\n          } else {\n            splitTitle[index + 1] = 'blocked';\n            newDecision = false;\n          }\n          title = splitTitle.join(' ');\n          $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n          this.policiesManager.updatePolicy(policyTitle, rule, newDecision);\n          break;\n        case 'subscription':\n          var newSubscriptionType = event.target.labels[0].textContent;\n\n          var decision = splitTitle[index + 1];\n          splitTitle = title.split('hyperties are');\n          if (newSubscriptionType === 'All subscribers') {\n            $('.authorise-btns').removeClass('hide');\n            newDecision = rule.authorise;\n            newSubscriptionType = '*';\n            title = 'Subscriptions from all hyperties are' + splitTitle[1];\n          } else {\n            $('.authorise-btns').addClass('hide');\n            newDecision = true;\n            newSubscriptionType = 'preauthorised';\n            title = 'Subscriptions from previously authorised hyperties are' + splitTitle[1];\n          }\n\n          $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n          this.policiesManager.updatePolicy(policyTitle, rule, newDecision, newSubscriptionType);\n          break;\n      }\n      this._goHome();\n    }\n  }]);\n\n  return PoliciesGUI;\n}();\n\nexports.default = PoliciesGUI;\n\n},{\"./PoliciesManager\":2}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PoliciesManager = function () {\n  function PoliciesManager(policyEngine) {\n    _classCallCheck(this, PoliciesManager);\n\n    this.policyEngine = policyEngine;\n    this.policies = this.policyEngine.context.policies;\n    this.variables = this.setVariables();\n    this.addition = this.setAdditionMethods();\n    this.validation = this.setValidationMethods();\n  }\n\n  _createClass(PoliciesManager, [{\n    key: 'addToGroup',\n    value: function addToGroup(groupName, user) {\n      this.policyEngine.addToGroup(groupName, user);\n    }\n  }, {\n    key: 'createGroup',\n    value: function createGroup(groupName) {\n      this.policyEngine.createGroup(groupName);\n    }\n  }, {\n    key: 'createPolicy',\n    value: function createPolicy(title) {\n      this.policyEngine.addPolicy('USER', title);\n    }\n  }, {\n    key: 'decreaseRulePriority',\n    value: function decreaseRulePriority(policyTitle, thisPriority, newPriority) {\n      this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority; //B-0\n      this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }, {\n    key: 'deleteGroup',\n    value: function deleteGroup(groupName) {\n      this.policyEngine.deleteGroup(groupName);\n    }\n  }, {\n    key: 'deletePolicy',\n    value: function deletePolicy(title) {\n      this.policyEngine.removePolicy('USER', title);\n    }\n  }, {\n    key: 'deleteRule',\n    value: function deleteRule(policyTitle, rule) {\n      var userPolicies = this.policyEngine.context.userPolicies;\n      userPolicies[policyTitle].deleteRule(rule);\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }, {\n    key: 'getActivePolicy',\n    value: function getActivePolicy() {\n      return this.policyEngine.context.activeUserPolicy;\n    }\n  }, {\n    key: 'getPolicy',\n    value: function getPolicy(key) {\n      return this.policyEngine.context.userPolicies[key];\n    }\n  }, {\n    key: 'getPoliciesTitles',\n    value: function getPoliciesTitles() {\n      var policies = this.policyEngine.context.userPolicies;\n      var titles = [];\n\n      for (var i in policies) {\n        titles.push(i);\n      }\n\n      return titles;\n    }\n  }, {\n    key: 'getTargets',\n    value: function getTargets(scope) {\n      var targets = [];\n\n      for (var i in this.policies[scope]) {\n        if (targets.indexOf(i) === -1) {\n          targets.push(i);\n        }\n      }\n\n      return targets;\n    }\n  }, {\n    key: 'increaseRulePriority',\n    value: function increaseRulePriority(policyTitle, thisPriority, newPriority) {\n      this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n      this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }, {\n    key: 'setVariables',\n    value: function setVariables() {\n      return {\n        'Date': {\n          title: '<br><h5>Updating date related configurations</h5><p>Incoming communications in the introduced date will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Date:</p>',\n          input: [['date', []]]\n        },\n        'Domain': {\n          title: '<br><h5>Updating domain configurations</h5><p>Incoming communications from a user whose identity is from the introduced domain allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Domain:</p>',\n          input: [['form', []]]\n        },\n        'Group of users': {\n          title: '<br><h5>Updating groups configurations</h5><p>Incoming communications from a user whose identity is in the introduced group will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Group name:</p>',\n          input: [['select', ['group', 'Select a group:']]]\n        },\n        'Subscription preferences': {\n          title: '<br><h5>Updating subscriptions configurations</h5><p>The acceptance of subscriptions to your hyperties will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          input: []\n        },\n        'Time of the day': {\n          title: '<br><h5>Updating time configurations</h5><p>Incoming communications in the introduced timeslot will be blocked, but this can be changed in the preferences page.</p><p>Please introduce a new timeslot in the following format:</p><p class=\"center-align\">&lt;START-HOUR&gt;:&lt;START-MINUTES&gt; to &lt;END-HOUR&gt;:&lt;END-MINUTES&gt;</p><br>',\n          description: '<p>Timeslot:</p>',\n          input: [['form', []]]\n        },\n        Weekday: {\n          title: '<br><h5>Updating weekday configurations</h5><p>Incoming communications in the introduced weekday will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Weekday:</p>',\n          input: [['select', ['weekday', 'Select a weekday:', ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]]]\n        }\n      };\n    }\n  }, {\n    key: 'setAdditionMethods',\n    value: function setAdditionMethods() {\n      var _this = this;\n\n      return {\n        Date: function Date(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule('simple', params[4], ['date', 'equals', params[3]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n\n        Domain: function Domain(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule('simple', params[4], ['domain', 'equals', params[3]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n\n        'Group of users': function GroupOfUsers(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule('simple', params[4], ['source', 'in', params[3]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n        'Subscription preferences': function SubscriptionPreferences(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          var operator = 'equals';\n          if (params[3] === 'preauthorised') {\n            operator = 'in';\n          }\n          userPolicies[policyTitle].createRule('subscription', params[4], ['subscription', operator, params[3]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n        'Time of the day': function TimeOfTheDay(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          params[3] = params[3].split(' to ');\n          var start = params[3][0].split(':');\n          start = start.join('');\n          var end = params[3][1].split(':');\n          end = end.join('');\n          userPolicies[policyTitle].createRule('simple', params[4], ['time', 'between', [start, end]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n\n        Weekday: function Weekday(params) {\n          var weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n          params[3] = weekdays.indexOf(params[3]);\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule('simple', params[4], ['weekday', 'equals', params[3]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        }\n      };\n    }\n  }, {\n    key: 'setValidationMethods',\n    value: function setValidationMethods() {\n      var _this2 = this;\n\n      return {\n        Date: function Date(scope, info) {\n          return _this2.isValidDate(info) & _this2.isValidScope(scope);\n        },\n        'Group of users': function GroupOfUsers(scope, info) {\n          return _this2.isValidString(info) & _this2.isValidScope(scope);\n        },\n        Domain: function Domain(scope, info) {\n          return _this2.isValidDomain(info) & _this2.isValidScope(scope);\n        },\n        Weekday: function Weekday(scope, info) {\n          return true & _this2.isValidScope(scope);\n        },\n        'Subscription preferences': function SubscriptionPreferences(scope, info) {\n          return _this2.isValidSubscriptionType(info) & _this2.isValidScope(scope);\n        },\n        'Time of the day': function TimeOfTheDay(scope, info) {\n          return _this2.isValidTimeslot(info) & _this2.isValidScope(scope);\n        }\n      };\n    }\n  }, {\n    key: 'updateActivePolicy',\n    value: function updateActivePolicy(title) {\n      this.policyEngine.context.activeUserPolicy = title;\n      this.policyEngine.context.saveActivePolicy();\n    }\n  }, {\n    key: 'isValidEmail',\n    value: function isValidEmail(info) {\n      var pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidDomain',\n    value: function isValidDomain(info) {\n      var pattern = /[a-z0-9.-]+\\.[a-z]{2,3}$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidString',\n    value: function isValidString(info) {\n      var pattern = /[a-z0-9.-]$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidSubscriptionType',\n    value: function isValidSubscriptionType(info) {\n      return true;\n    }\n  }, {\n    key: 'isValidDate',\n    value: function isValidDate(info) {\n      var infoSplit = info.split('/');\n      var day = parseInt(infoSplit[0]);\n      var month = parseInt(infoSplit[1]);\n      var year = parseInt(infoSplit[2]);\n\n      var date = new Date(year, month - 1, day);\n      var isValidFormat = date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n      var formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\n      var now = new Date();\n      var today = now.getDate() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear();\n\n      var isFuture = false;\n      if (date.getFullYear() > now.getFullYear()) {\n        isFuture = true;\n      } else {\n        if (date.getFullYear() == now.getFullYear()) {\n          if (date.getMonth() + 1 > now.getMonth() + 1) {\n            isFuture = true;\n          } else {\n            if (date.getMonth() + 1 == now.getMonth() + 1) {\n              if (date.getDate() >= now.getDate()) {\n                isFuture = true;\n              }\n            }\n          }\n        }\n      }\n\n      return isValidFormat && isFuture;\n    }\n  }, {\n    key: 'isValidScope',\n    value: function isValidScope(scope) {\n      return scope !== '';\n    }\n  }, {\n    key: 'isValidTimeslot',\n    value: function isValidTimeslot(info) {\n      if (!info) {\n        return false;\n      }\n      var splitInfo = info.split(' to '); // [12:00, 13:00]\n      var twoTimes = splitInfo.length === 2;\n      if (!twoTimes) {\n        return false;\n      }\n      var splitStart = splitInfo[0].split(':'); // [12, 00]\n      var splitEnd = splitInfo[1].split(':'); // [13, 00]\n      if (splitStart.length !== 2 || splitEnd.length !== 2) {\n        return false;\n      }\n      var okSize = splitStart[0].length === 2 && splitStart[1].length === 2 && splitEnd[0].length === 2 && splitEnd[1].length === 2;\n      var areIntegers = splitStart[0] == parseInt(splitStart[0], 10) && splitStart[1] == parseInt(splitStart[1], 10) && splitEnd[0] == parseInt(splitEnd[0], 10) && splitEnd[1] == parseInt(splitEnd[1], 10);\n      return twoTimes && okSize && areIntegers;\n    }\n  }, {\n    key: 'getFormattedPolicies',\n    value: function getFormattedPolicies() {\n      var policiesPE = this.policyEngine.context.userPolicies;\n      var policiesGUI = [];\n\n      for (var i in policiesPE) {\n        var policy = {\n          title: policiesPE[i].key,\n          rulesTitles: [],\n          ids: []\n        };\n\n        if (policiesPE[i].rules.length !== 0) {\n          policiesPE[i].rules = policiesPE[i].sortRules();\n          for (var j in policiesPE[i].rules) {\n            var rule = policiesPE[i].rules[j];\n            var title = this._getTitle(policiesPE[i].rules[j]);\n            policy.rulesTitles.push(title);\n            policy.ids.push(policy.title + ':' + policiesPE[i].rules[j].priority);\n          }\n        }\n\n        policiesGUI.push(policy);\n      }\n\n      return policiesGUI;\n    }\n  }, {\n    key: 'getRuleOfPolicy',\n    value: function getRuleOfPolicy(title, priority) {\n      var policies = this.policyEngine.context.userPolicies;\n      var policy = policies[title];\n      return policy.getRuleByPriority(priority);\n    }\n  }, {\n    key: '_getTitle',\n    value: function _getTitle(rule) {\n      var condition = rule.condition;\n      var authorise = rule.authorise ? 'allowed' : 'blocked';\n      var target = rule.target === 'global' ? 'All identities and hyperties' : rule.target;\n      var attribute = condition.attribute;\n      switch (attribute) {\n        case 'date':\n          return 'Date ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n        case 'domain':\n          return 'Domain \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n        case 'source':\n          if (condition.operator === 'in') {\n            return 'Group \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n          } else {\n            if (condition.operator === 'equals') {\n              return 'User ' + condition.params + ' is ' + authorise + '(' + target + ')';\n            }\n          }\n        case 'subscription':\n          if (condition.params === '*') {\n            return 'Subscriptions from all hyperties are ' + authorise + ' (' + target + ')';\n          } else {\n            if (condition.params === 'preauthorised') {\n              return 'Subscriptions from previously authorised hyperties are allowed (' + target + ')';\n            }\n          }\n        case 'time':\n          var start = condition.params[0][0] + condition.params[0][1] + ':' + condition.params[0][2] + condition.params[0][3];\n          var end = condition.params[1][0] + condition.params[1][1] + ':' + condition.params[1][2] + condition.params[1][3];\n          return 'Timeslot from ' + start + ' to ' + end + ' is ' + authorise + ' (' + target + ')';\n        case 'weekday':\n          var weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n          var weekdayID = condition.params;\n          return 'Weekday \\\"' + weekdays[weekdayID] + '\\\" is ' + authorise + ' (' + target + ')';\n\n        default:\n          return condition + ' - ' + authorise;\n      }\n    }\n  }, {\n    key: 'getVariables',\n    value: function getVariables() {\n      var variablesTitles = [];\n      for (var i in this.variables) {\n        variablesTitles.push(i);\n      }\n      return variablesTitles;\n    }\n  }, {\n    key: 'getVariableInfo',\n    value: function getVariableInfo(variable) {\n      return this.variables[variable];\n    }\n  }, {\n    key: 'getMyEmails',\n    value: function getMyEmails() {\n      return this.policyEngine.context.getMyEmails();\n    }\n  }, {\n    key: 'getMyHyperties',\n    value: function getMyHyperties() {\n      return this.policyEngine.context.getMyHyperties();\n    }\n\n    //TODO If there is a problem with the input, show it to the user\n\n  }, {\n    key: 'setInfo',\n    value: function setInfo(variable, policyTitle, info, authorise, scope, target) {\n      if (this.validation[variable](scope, info)) {\n        this.addition[variable]([policyTitle, scope, target, info, authorise]);\n      } else {\n        throw Error('Invalid configuration');\n      }\n    }\n  }, {\n    key: 'getInfo',\n    value: function getInfo(scope, title) {\n      var policies = this.policies[scope];\n      var policy = {};\n      for (var i in policies) {\n        if (policies[i].condition === title) {\n          policy = policies[i];\n        }\n      }\n      if (policy !== {}) {\n        var condition = policy.condition.split(' ');\n        return this.policyEngine.getList(scope, condition[2]);\n      } else {\n        throw Error('Policy <' + title + '> not found!');\n      }\n    }\n  }, {\n    key: 'deleteInfo',\n    value: function deleteInfo(variable, scope, target, info) {\n      var params = [scope, target, info];\n      if (variable === 'member') {\n        var conditionSplit = info.split(' ');\n        var groupName = conditionSplit[2];\n        params = [scope, groupName, info];\n      }\n      this.deletion[variable](params);\n    }\n  }, {\n    key: 'getGroup',\n    value: function getGroup(scope, target, groupName) {\n      return this.policyEngine.getGroup(scope, target, groupName);\n    }\n  }, {\n    key: 'getGroups',\n    value: function getGroups() {\n      var groups = this.policyEngine.context.groups;\n      var groupsGUI = {\n        groupsNames: [],\n        members: [],\n        ids: []\n      };\n\n      for (var i in groups) {\n        groupsGUI.groupsNames.push(i);\n        groupsGUI.members.push(groups[i]);\n        var ids = [];\n        for (var j in groups[i]) {\n          ids.push(i + '::' + groups[i][j]);\n        }\n        groupsGUI.ids.push(ids);\n      }\n\n      return groupsGUI;\n    }\n  }, {\n    key: 'getGroupsNames',\n    value: function getGroupsNames() {\n      return this.policyEngine.getGroupsNames();\n    }\n  }, {\n    key: 'removeFromGroup',\n    value: function removeFromGroup(groupName, user) {\n      this.policyEngine.removeFromGroup(groupName, user);\n    }\n  }, {\n    key: 'updatePolicy',\n    value: function updatePolicy(policyTitle, rule, newDecision, newSubscriptionType) {\n      var userPolicies = this.policyEngine.context.userPolicies;\n      userPolicies[policyTitle].deleteRule(rule);\n      if (!newSubscriptionType) {\n        var type = void 0;\n        if (rule.condition.attribute === 'subscription') {\n          type = 'subscription';\n        } else {\n          type = 'simple';\n        }\n        userPolicies[policyTitle].createRule(type, newDecision, rule.condition, rule.scope, rule.target, rule.priority);\n      } else {\n        var operator = newSubscriptionType === '*' ? 'equals' : 'in';\n        userPolicies[policyTitle].createRule('subscription', newDecision, ['subscription', operator, newSubscriptionType], rule.scope, rule.target, rule.priority);\n      }\n\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }]);\n\n  return PoliciesManager;\n}();\n\nexports.default = PoliciesManager;\n\n},{}]},{},[1])(1)\n});\n\n","import PoliciesManager from './PoliciesManager';\n\nclass PoliciesGUI {\n\n  constructor(policyEngine) {\n    if (!policyEngine) throw Error('Policy Engine is not set!');\n    this.policiesManager = new PoliciesManager(policyEngine);\n    this.elements = this._setElements();\n\n    $('.settings-btn').on('click', (event) => {\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').removeClass('hide');\n      document.getElementsByTagName('body')[0].style = 'background-color:white;';\n    });\n\n    $('.policies-page-show').on('click', (event) => {\n      $('.policies-section').removeClass('hide');\n      this._goHome();\n    });\n\n    $('.admin-page-exit').on('click', (event) => {\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').addClass('hide');\n      document.getElementsByTagName('body')[0].style = 'background-color:transparent;';\n    });\n\n    $('.group-management-btn').on('click', (event) => {\n      $('.groups-management-modal').openModal();\n      this._manageGroups();\n    });\n\n    $('.exit-btn').on('click', (event) => {\n      $('.subscription-type').addClass('hide');\n    })\n  }\n\n  _addMember() {\n    $('.groups-show').addClass('hide');\n    let group = event.target.closest('tr').id;\n    $('.member-new-intro').html('<h5>Add a member to a group</h5><p>Insert a user email below to add to the \"' + group + '\" group.</p>');\n    $('.member-new').removeClass('hide');\n    $('.member-new-ok').on('click', (event) => {\n      let member = $('#member-new').val();\n      this.policiesManager.addToGroup(group, member);\n      this._manageGroups();\n    });\n  }\n\n  _createGroup() {\n    $('.groups-show').addClass('hide');\n    $('#group-new-name').val('');\n    $('.group-new').removeClass('hide');\n    $('.group-new-ok').on('click', (event) => {\n      let groupName = $('#group-new-name').val();\n      this.policiesManager.createGroup(groupName);\n      this._manageGroups();\n    });\n  }\n\n  _createPolicy() {\n    $('#policy-new-title').val('');\n    $('.policy-new').openModal();\n    $('.policy-new-ok').off();\n    $('.policy-new-ok').on('click', (event) => {\n      let policyTitle = $('#policy-new-title').val();\n      this.policiesManager.createPolicy(policyTitle);\n      $('.policy-new').closeModal();\n      this._goHome();\n    });\n  }\n\n  _decreaseRulePriority() {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    let lastPriority = this.policiesManager.getPolicy(policyTitle).getLastPriority();\n    if (lastPriority != thisPriority) {\n      let newPriority = parseInt(thisPriority + 1);\n      this.policiesManager.decreaseRulePriority(policyTitle, thisPriority, newPriority);\n      this._goHome();\n    }\n  }\n\n  _deleteMember() {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split('::');\n    let member = splitId[splitId.length - 1];\n    splitId.pop();\n    let group = splitId.join('::');\n    this.policiesManager.removeFromGroup(group, member);\n    this._manageGroups();\n  }\n\n  _deleteGroup() {\n    let groupName = event.target.closest('tr').children[0].id;\n    this.policiesManager.deleteGroup(groupName);\n    this._manageGroups();\n  }\n\n  _deletePolicy() {\n    let policyTitle = event.target.closest('tr').id;\n    this.policiesManager.deletePolicy(policyTitle);\n    this._goHome();\n  }\n\n  _deleteRule() {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let priority = splitId[splitId.length - 1];\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    let rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n\n    this.policiesManager.deleteRule(policyTitle, rule);\n    this._goHome();\n  }\n\n  _getActivePolicy() {\n    $('.policy-active').html('');\n    let activeUserPolicy = this.policiesManager.getActivePolicy();\n    let radio = '<form\">';\n    let policies = this.policiesManager.getPoliciesTitles();\n    for (let i in policies) {\n      if (policies[i] === activeUserPolicy) {\n        radio += '<p><input name=\"policies-list\" type=\"radio\" id=\"' + policies[i] + '\" checked/><label for=\"' + policies[i] + '\" class=\"policies-list black-text\">' + policies[i] + '</label></p>';\n      } else {\n        radio += '<p><input name=\"policies-list\" type=\"radio\" id=\"' + policies[i] + '\"/><label for=\"' + policies[i] + '\" class=\"policies-list black-text\">' + policies[i] + '</label></p>';\n      }\n    }\n\n    radio += '</form>';\n\n    if (policies.length > 0) {\n      $('.policy-active').html('<p><b>Activate a policy:</b></p>' + radio);\n    }\n\n    $('.policies-list').on('click', (event) => {\n      let policyTitle = event.target.textContent;\n      this.policiesManager.updateActivePolicy(policyTitle);\n    });\n  }\n\n  _getGroupOptions(title, keys, scopes, lists) {\n    let list = '<option disabled selected>' + title + '</option>';\n\n    for (let i in keys) {\n      list += '<optgroup label=' + keys[i] + '>';\n      for (let j in lists[i]) {\n        list += '<option id=\"' + scopes[i] + '\">' + lists[i][j] + '</option>';\n      }\n    }\n\n    return list;\n  }\n\n  _getInfo(variable) {\n    let info;\n\n    switch(variable) {\n      case 'Date':\n        info = $('.config').find('input').val();\n        if (info.indexOf(',') !== -1) { //20 July, 2016\n          let splitInfo = info.split(' '); //['20', 'July,',' '2016']\n          splitInfo[1] = splitInfo[1].substring(0, splitInfo[1].length - 1); //'July'\n          let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n          info = splitInfo[0] + '/' + (months.indexOf(splitInfo[1]) + 1) + '/' + splitInfo[2];\n        } else { // 2016-07-20\n          let splitInfo = info.split('-');\n          info = splitInfo[2] + '/' + splitInfo[1] + '/' + splitInfo[0];\n        }\n        break;\n      case 'Groups of users':\n        info = $('#group').find(\":selected\").text();\n        break;\n      case 'Subscription preferences':\n        if (info = $(\"input[name='rule-new-subscription']:checked\")[0] !== undefined) {\n          info = $(\"input[name='rule-new-subscription']:checked\")[0].id;\n        }\n        break;\n      case 'Weekday':\n        info = $('#weekday').find(\":selected\").text();\n        break;\n      default:\n        info = $('.config').find('input').val();\n        break;\n    }\n\n    return info;\n  }\n\n  _getList(items) {\n      let list = '';\n      let numItems = items.length;\n\n      for (let i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n\n  _getOptions(id, title, list) {\n    let options = '<select id=\"' + id + '\" class=\"browser-default\"><option disabled selected>' + title + '</option>';\n\n    for (let i in list) {\n      options += '<option>' + list[i] + '</option>';\n    }\n    options += '</select>';\n\n    return options;\n  }\n\n  _getPoliciesTable() {\n    $('.policies-current').html('');\n\n    let policies = this.policiesManager.getFormattedPolicies();\n    let policiesTitles = [];\n    let rulesTitles = [];\n    let ids = [];\n\n    for (let i in policies) {\n      policiesTitles.push(policies[i].title);\n      rulesTitles.push(policies[i].rulesTitles);\n      ids.push(policies[i].ids);\n    }\n\n    let table = '<table>';\n    let isEmpty = policiesTitles.length === 0;\n\n    for (let i in policiesTitles) {\n      table += '<thead><tr id=\"' + policiesTitles[i] + '\"><td></td><td></td><th>' + policiesTitles[i] + '</th><td><i class=\"material-icons clickable-cell policy-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n      for (let j in rulesTitles[i]) {\n        table += '<tr id=\"' + ids[i][j] + '\" ><td><i class=\"material-icons clickable-cell rule-priority-increase\" style=\"cursor: pointer; vertical-align: middle\">arrow_upward</i></td><td><i class=\"material-icons clickable-cell rule-priority-decrease\" style=\"cursor: pointer; vertical-align: middle\">arrow_downward</i></td><td class=\"rule-show clickable-cell\" style=\"cursor: pointer\">' + rulesTitles[i][j] + '</td><td><i class=\"material-icons clickable-cell rule-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n      }\n      table += '<tr id=\"' + policiesTitles[i] + '\"><td></td><td></td><td style=\"text-align:center\"><i class=\"material-icons clickable-cell rule-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n    }\n    if (!isEmpty) {\n      table += '</tbody></table>';\n      $('.policies-current').append(table);\n    } else {\n      $('.policies-current').append('<p>There are no configurations set.</p>');\n    }\n    $('.rule-add').on('click', (event) => { this._showVariablesTypes(); });\n    $('.rule-delete').on('click', (event) => { this._deleteRule(); });\n    $('.rule-show').on('click', (event) => { this._showRule(); });\n    $('.rule-priority-increase').on('click', (event) => { this._increaseRulePriority(); });\n    $('.rule-priority-decrease').on('click', (event) => { this._decreaseRulePriority(); });\n    $('.policy-add').off();\n    $('.policy-add').on('click', (event) => { this._createPolicy(); });\n    $('.policy-delete').on('click', (event) => { this._deletePolicy(); });\n  }\n\n  _goHome() {\n    this._getActivePolicy();\n    this._getPoliciesTable();\n  }\n\n  _increaseRulePriority() {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\n    if (thisPriority !== 0) {\n      splitId.pop();\n      let policyTitle = splitId.join(':');\n      let newPriority = thisPriority - 1;\n\n      this.policiesManager.increaseRulePriority(policyTitle, thisPriority, newPriority);\n      this._goHome();\n    }\n  }\n\n  _manageGroups() {\n    $('.groups-current').html('');\n    $('.group-new').addClass('hide');\n    $('.member-new').addClass('hide');\n    $('.groups-show').removeClass('hide');\n    let groupsPE = this.policiesManager.getGroups();\n    let groups = groupsPE.groupsNames;\n    let members = groupsPE.members;\n    let ids = groupsPE.ids;\n\n    let table = '<table>';\n    let isEmpty = groups.length === 0;\n\n    for (let i in groups) {\n      table += '<thead><tr><th id=\"' + groups[i] + '\">' + groups[i] + '</th><td style=\"text-align:right\"><i class=\"material-icons clickable-cell group-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n      for (let j in members[i]) {\n        table += '<tr id=\"' + ids[i][j] + '\" ><td style=\"cursor: pointer\">' + members[i][j] + '</td><td style=\"text-align:right\"><i class=\"material-icons clickable-cell member-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n      }\n\n      table += '<tr id=\"' + groups[i] + '\"><td><i class=\"material-icons clickable-cell member-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n    }\n\n    if (!isEmpty) {\n      table += '</tbody></table>';\n      $('.groups-current').append(table);\n    } else {\n      $('.groups-current').append('<p>There are no groups set.</p>');\n    }\n\n    $('.member-add').on('click', (event) => { this._addMember(); });\n    $('.member-delete').on('click', (event) => { this._deleteMember(); });\n    $('.group-add').on('click', (event) => { this._createGroup(); });\n    $('.group-delete').on('click', (event) => { this._deleteGroup(); });\n  }\n\n  _setElements() {\n    return {\n      date: (params) => { return '<input type=\"date\" class=\"datepicker\">'; },\n      select: (params) => { return this._getOptions(params[0], params[1], params[2]); },\n      form: (params) => { return '<form><input type=\"text\" placeholder=\"' + params + '\"></input></form>'; }\n    };\n  }\n\n  _showNewConfigurationPanel(policyTitle) {\n    let variable = event.target.text;\n    $('.variable').html(this._getNewConfiguration(policyTitle, variable));\n    $('.scopes').empty().html('');\n\n    let keys = ['Email', 'Hyperty', 'All'];\n    let scopes = ['user', 'hyperty', 'global'];\n    let lists = [];\n\n    lists.push(this.policiesManager.getMyEmails());\n    lists.push(this.policiesManager.getMyHyperties());\n    lists.push(['All identities and hyperties']);\n    $('.scopes').append(this._getGroupOptions('Apply this configuration to:', keys, scopes, lists));\n    $('.variable').removeClass('hide');\n  }\n\n  _showVariablesTypes() {\n    let policyTitle = event.target.closest('tr').id;\n\n    $('#variables-types').empty().html('');\n    let variables = this.policiesManager.getVariables();\n    $('#variables-types').append(this._getList(variables));\n    $('.variable').addClass('hide');\n    $('.rule-new').openModal();\n    $('#variables-types').off();\n    $('#variables-types').on('click', (event) => { this._showNewConfigurationPanel(policyTitle); });\n  }\n\n  _getNewConfiguration(policyTitle, variable) {\n    let info = this.policiesManager.getVariableInfo(variable);\n    $('.rule-new-title').html(info.title);\n    $('.description').html(info.description);\n    $('.config').html('');\n\n    if (variable === 'Subscription preferences') {\n      $('.subscription-type').removeClass('hide');\n    } else {\n      $('.subscription-type').addClass('hide');\n      let tags = info.input;\n      for (let i in tags) {\n        if (variable === 'Group of users') {\n          tags[i][1].push(this.policiesManager.getGroupsNames());\n        }\n        $('.config').append(this.elements[tags[i][0]](tags[i][1]));\n        if (variable === 'Group of users') {\n          tags[i][1].pop();\n        }\n      }\n      if (variable ==='date') {\n        $('.datepicker').pickadate({\n          selectMonths: true,\n          selectYears: 15\n        });\n      }\n    }\n    document.getElementById('allow').checked = false;\n    document.getElementById('block').checked = false;\n    $('.ok-btn').off();\n    $('.ok-btn').on('click', (event) => {\n      if ($(\"input[name='rule-new-decision']:checked\")[0] !== undefined) {\n        let info = this._getInfo(variable);\n        let decision = $(\"input[name='rule-new-decision']:checked\")[0].id;\n        decision = decision === 'allow';\n        let scope = $('.scopes').find(\":selected\")[0].id;\n        let target = $('.scopes').find(\":selected\")[0].textContent;\n        target = (target === 'All identities and hyperties') ? 'global' : target;\n        this.policiesManager.setInfo(variable, policyTitle, info, decision, scope, target);\n        $('.rule-new').closeModal();\n        this._goHome();\n      } else {\n        throw Error('INFORMATION MISSING: please specify an authorisation decision.');\n      }\n    });\n  }\n\n  _deleteInfo(resourceType) {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let scope = splitId[0];\n    splitId.shift();\n    let target = splitId.join('');\n    let condition = event.target.closest('tr').children[0].id;\n    this.policiesManager.deleteInfo(resourceType, scope, target, condition);\n    this._goHome();\n  }\n\n  _showRule() {\n    let ruleTitle = event.target.textContent;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let priority = splitId[splitId.length - 1];\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    let rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n    if (rule.condition.attribute === 'subscription' && rule.condition.params === 'preauthorised') {\n      $('.authorise-btns').addClass('hide');\n    } else {\n      let element;\n      if (rule.authorise) {\n        element = document.getElementById('btn-allow');\n      } else {\n        element = document.getElementById('btn-block');\n      }\n      element.checked = true;\n      $('.authorise-btns').removeClass('hide');\n    }\n    $('.member-add').addClass('hide');\n    $('.member-new-btn').addClass('hide');\n\n    $('.rule-details').openModal();\n    $('.rule-title').html('<h5><b>' + ruleTitle + '</b></h5>');\n    if (rule.condition.attribute === 'subscription') {\n      $('.subscription-type').removeClass('hide');\n    }\n    $('.subscription-decision').on('click', (event) => { this._updateRule('subscription', policyTitle, rule); });\n    $('.decision').off();\n    $('.decision').on('click', (event) => { this._updateRule('authorisation', policyTitle, rule);});\n  }\n\n  _updateRule(type, policyTitle, rule) {\n    let title = $('.rule-title').text();\n    let splitTitle = title.split(' ');\n    let index = splitTitle.indexOf('is');\n    if (index === -1) {\n      index = splitTitle.indexOf('are');\n    }\n    switch (type) {\n      case 'authorisation':\n        let newDecision = $(\"input[name='rule-update-decision']:checked\")[0].id;\n        if (newDecision === 'btn-allow') {\n          splitTitle[index + 1] = 'allowed';\n          newDecision = true;\n        } else {\n          splitTitle[index + 1] = 'blocked';\n          newDecision = false;\n        }\n        title = splitTitle.join(' ');\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n        this.policiesManager.updatePolicy(policyTitle, rule, newDecision);\n        break;\n      case 'subscription':\n        let newSubscriptionType = event.target.labels[0].textContent;\n\n        let decision = splitTitle[index + 1];\n        splitTitle = title.split('hyperties are');\n        if (newSubscriptionType === 'All subscribers') {\n          $('.authorise-btns').removeClass('hide');\n          newDecision = rule.authorise;\n          newSubscriptionType = '*';\n          title = 'Subscriptions from all hyperties are' + splitTitle[1];\n        } else {\n          $('.authorise-btns').addClass('hide');\n          newDecision = true;\n          newSubscriptionType = 'preauthorised';\n          title = 'Subscriptions from previously authorised hyperties are' + splitTitle[1];\n        }\n\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n        this.policiesManager.updatePolicy(policyTitle, rule, newDecision, newSubscriptionType);\n        break;\n    }\n    this._goHome();\n  }\n}\n\nexport default PoliciesGUI;\n","class PoliciesManager {\n\n  constructor(policyEngine) {\n    this.policyEngine = policyEngine;\n    this.policies = this.policyEngine.context.policies;\n    this.variables = this.setVariables();\n    this.addition = this.setAdditionMethods();\n    this.validation = this.setValidationMethods();\n  }\n\n  addToGroup(groupName, user) {\n    this.policyEngine.addToGroup(groupName, user);\n  }\n\n  createGroup(groupName) {\n    this.policyEngine.createGroup(groupName);\n  }\n\n  createPolicy(title) {\n    this.policyEngine.addPolicy('USER', title);\n  }\n\n  decreaseRulePriority(policyTitle, thisPriority, newPriority) {\n    this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority; //B-0\n    this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n  deleteGroup(groupName) {\n    this.policyEngine.deleteGroup(groupName);\n  }\n\n  deletePolicy(title) {\n    this.policyEngine.removePolicy('USER', title);\n  }\n\n  deleteRule(policyTitle, rule) {\n    let userPolicies = this.policyEngine.context.userPolicies;\n    userPolicies[policyTitle].deleteRule(rule);\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n  getActivePolicy() {\n    return this.policyEngine.context.activeUserPolicy;\n  }\n\n  getPolicy(key) {\n    return this.policyEngine.context.userPolicies[key];\n  }\n\n  getPoliciesTitles() {\n    let policies = this.policyEngine.context.userPolicies;\n    let titles = [];\n\n    for (let i in policies) {\n      titles.push(i);\n    }\n\n    return titles;\n  }\n\n  getTargets(scope) {\n    let targets = [];\n\n    for (let i in this.policies[scope]) {\n      if (targets.indexOf(i) === -1) {\n        targets.push(i);\n      }\n    }\n\n    return targets;\n  }\n\n  increaseRulePriority(policyTitle, thisPriority, newPriority) {\n    this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n    this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n  setVariables() {\n    return {\n      'Date': {\n        title: '<br><h5>Updating date related configurations</h5><p>Incoming communications in the introduced date will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Date:</p>',\n        input: [\n          ['date', []]\n        ]\n      },\n      'Domain': {\n        title: '<br><h5>Updating domain configurations</h5><p>Incoming communications from a user whose identity is from the introduced domain allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Domain:</p>',\n        input: [\n          ['form', []]\n        ]\n      },\n      'Group of users': {\n        title: '<br><h5>Updating groups configurations</h5><p>Incoming communications from a user whose identity is in the introduced group will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Group name:</p>',\n        input: [\n          ['select', ['group', 'Select a group:']]\n        ]\n      },\n      'Subscription preferences': {\n        title: '<br><h5>Updating subscriptions configurations</h5><p>The acceptance of subscriptions to your hyperties will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        input: []\n      },\n      'Time of the day': {\n        title: '<br><h5>Updating time configurations</h5><p>Incoming communications in the introduced timeslot will be blocked, but this can be changed in the preferences page.</p><p>Please introduce a new timeslot in the following format:</p><p class=\"center-align\">&lt;START-HOUR&gt;:&lt;START-MINUTES&gt; to &lt;END-HOUR&gt;:&lt;END-MINUTES&gt;</p><br>',\n        description: '<p>Timeslot:</p>',\n        input: [\n          ['form', []]\n        ]\n      },\n      Weekday: {\n        title: '<br><h5>Updating weekday configurations</h5><p>Incoming communications in the introduced weekday will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Weekday:</p>',\n        input: [\n          ['select', ['weekday', 'Select a weekday:', ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]]\n        ]\n      }\n    };\n  }\n\n  setAdditionMethods() {\n    return {\n      Date: (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule('simple', params[4], ['date', 'equals', params[3]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n\n      Domain: (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule('simple', params[4], ['domain', 'equals', params[3]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n\n      'Group of users': (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule('simple', params[4], ['source', 'in', params[3]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n      'Subscription preferences': (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        let operator = 'equals';\n        if (params[3] === 'preauthorised') {\n          operator = 'in';\n        }\n        userPolicies[policyTitle].createRule('subscription', params[4], ['subscription', operator, params[3]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n      'Time of the day': (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        params[3] = params[3].split(' to ');\n        let start = params[3][0].split(':');\n        start = start.join('');\n        let end = params[3][1].split(':');\n        end = end.join('');\n        userPolicies[policyTitle].createRule('simple', params[4], ['time', 'between', [start, end]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n\n      Weekday: (params) => {\n        let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        params[3] = weekdays.indexOf(params[3]);\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule('simple', params[4], ['weekday', 'equals', params[3]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      }\n    };\n  }\n\n  setValidationMethods() {\n    return {\n      Date: (scope, info) => { return this.isValidDate(info) & this.isValidScope(scope); },\n      'Group of users': (scope, info) => { return this.isValidString(info) & this.isValidScope(scope); },\n      Domain: (scope, info) => { return this.isValidDomain(info) & this.isValidScope(scope); },\n      Weekday: (scope, info) => { return true & this.isValidScope(scope); },\n      'Subscription preferences': (scope, info) => { return this.isValidSubscriptionType(info) & this.isValidScope(scope); },\n      'Time of the day': (scope, info) => { return this.isValidTimeslot(info) & this.isValidScope(scope); }\n    };\n  }\n\n  updateActivePolicy(title) {\n    this.policyEngine.context.activeUserPolicy = title;\n    this.policyEngine.context.saveActivePolicy();\n  }\n\n  isValidEmail(info) {\n    let pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n    return pattern.test(info);\n  }\n\n  isValidDomain(info) {\n    let pattern = /[a-z0-9.-]+\\.[a-z]{2,3}$/;\n    return pattern.test(info);\n  }\n\n  isValidString(info) {\n    let pattern = /[a-z0-9.-]$/;\n    return pattern.test(info);\n  }\n\n  isValidSubscriptionType(info) {\n    return true;\n  }\n\n  isValidDate(info) {\n    let infoSplit = info.split('/');\n    let day = parseInt(infoSplit[0]);\n    let month = parseInt(infoSplit[1]);\n    let year = parseInt(infoSplit[2]);\n\n    let date = new Date(year, month-1, day);\n    let isValidFormat = date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n    let formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()\n    let now = new Date();\n    let today = now.getDate() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear();\n\n    let isFuture = false;\n    if (date.getFullYear() > now.getFullYear()) {\n      isFuture = true;\n    } else {\n      if (date.getFullYear() == now.getFullYear()) {\n        if ((date.getMonth() + 1) > (now.getMonth() + 1)) {\n          isFuture = true;\n        } else {\n          if ((date.getMonth() + 1) == (now.getMonth() + 1)) {\n            if (date.getDate() >= (now.getDate())) {\n              isFuture = true;\n            }\n          }\n        }\n      }\n    }\n\n    return (isValidFormat && isFuture);\n  }\n\n  isValidScope(scope) {\n    return scope !== '';\n  }\n\n  isValidTimeslot(info) {\n    if (!info) {\n      return false;\n    }\n    let splitInfo = info.split(' to '); // [12:00, 13:00]\n    let twoTimes = splitInfo.length === 2;\n    if (!twoTimes) {\n      return false;\n    }\n    let splitStart = splitInfo[0].split(':'); // [12, 00]\n    let splitEnd = splitInfo[1].split(':'); // [13, 00]\n    if (splitStart.length !== 2 || splitEnd.length !== 2) {\n      return false;\n    }\n    let okSize = (splitStart[0].length === 2) && (splitStart[1].length === 2) && (splitEnd[0].length === 2) && (splitEnd[1].length === 2);\n    let areIntegers = (splitStart[0] == parseInt(splitStart[0], 10)) && (splitStart[1] == parseInt(splitStart[1], 10)) && (splitEnd[0] == parseInt(splitEnd[0], 10)) && (splitEnd[1] == parseInt(splitEnd[1], 10));\n    return twoTimes && okSize && areIntegers;\n  }\n\n  getFormattedPolicies() {\n    let policiesPE = this.policyEngine.context.userPolicies;\n    let policiesGUI = [];\n\n    for (let i in policiesPE) {\n      let policy = {\n        title: policiesPE[i].key,\n        rulesTitles: [],\n        ids: []\n      }\n\n      if (policiesPE[i].rules.length !== 0) {\n        policiesPE[i].rules = policiesPE[i].sortRules();\n        for (let j in policiesPE[i].rules) {\n          let rule = policiesPE[i].rules[j];\n          let title = this._getTitle(policiesPE[i].rules[j]);\n          policy.rulesTitles.push(title);\n          policy.ids.push(policy.title + ':' + policiesPE[i].rules[j].priority);\n        }\n      }\n\n      policiesGUI.push(policy);\n    }\n\n    return policiesGUI;\n  }\n\n  getRuleOfPolicy(title, priority) {\n    let policies = this.policyEngine.context.userPolicies;\n    let policy = policies[title];\n    return policy.getRuleByPriority(priority);\n  }\n\n  _getTitle(rule) {\n    let condition = rule.condition;\n    let authorise = (rule.authorise) ? 'allowed' : 'blocked';\n    let target = rule.target === 'global' ? 'All identities and hyperties' : rule.target;\n    let attribute = condition.attribute;\n    switch(attribute) {\n      case 'date':\n        return 'Date ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n      case 'domain':\n        return 'Domain \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n      case 'source':\n        if (condition.operator === 'in') {\n          return 'Group \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n        } else {\n          if (condition.operator === 'equals') {\n            return 'User ' + condition.params + ' is ' + authorise + '(' + target + ')';\n          }\n        }\n      case 'subscription':\n        if (condition.params === '*') {\n          return 'Subscriptions from all hyperties are ' + authorise + ' (' + target + ')';\n        } else {\n          if (condition.params === 'preauthorised') {\n            return 'Subscriptions from previously authorised hyperties are allowed (' + target + ')';\n          }\n        }\n      case 'time':\n        let start = condition.params[0][0] + condition.params[0][1] + ':' + condition.params[0][2] + condition.params[0][3];\n        let end = condition.params[1][0] + condition.params[1][1] + ':' + condition.params[1][2] + condition.params[1][3];\n        return 'Timeslot from ' + start + ' to ' + end + ' is ' + authorise + ' (' + target + ')';\n      case 'weekday':\n        let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        let weekdayID = condition.params;\n        return 'Weekday \\\"' + weekdays[weekdayID] + '\\\" is ' + authorise + ' (' + target + ')';\n\n      default:\n        return condition + ' - ' + authorise;\n    }\n  }\n\n  getVariables() {\n    let variablesTitles = [];\n    for (let i in this.variables) {\n      variablesTitles.push(i);\n    }\n    return variablesTitles;\n  }\n\n  getVariableInfo(variable) {\n    return this.variables[variable];\n  }\n\n  getMyEmails() {\n    return this.policyEngine.context.getMyEmails();\n  }\n\n  getMyHyperties() {\n    return this.policyEngine.context.getMyHyperties();\n  }\n\n  //TODO If there is a problem with the input, show it to the user\n  setInfo(variable, policyTitle, info, authorise, scope, target) {\n    if (this.validation[variable](scope, info)) {\n      this.addition[variable]([policyTitle, scope, target, info, authorise]);\n    } else {\n      throw Error('Invalid configuration');\n    }\n  }\n\n  getInfo(scope, title) {\n    let policies = this.policies[scope];\n    let policy = {};\n    for (let i in policies) {\n      if (policies[i].condition === title) {\n        policy = policies[i];\n      }\n    }\n    if (policy !== {}) {\n      let condition = policy.condition.split(' ');\n      return this.policyEngine.getList(scope, condition[2]);\n    } else {\n      throw Error('Policy <' + title + '> not found!');\n    }\n  }\n\n  deleteInfo(variable, scope, target, info) {\n    let params = [scope, target, info];\n    if (variable === 'member') {\n      let conditionSplit = info.split(' ');\n      let groupName = conditionSplit[2];\n      params = [scope, groupName, info];\n    }\n    this.deletion[variable](params);\n  }\n\n  getGroup(scope, target, groupName) {\n    return this.policyEngine.getGroup(scope, target, groupName);\n  }\n\n  getGroups() {\n    let groups = this.policyEngine.context.groups;\n    let groupsGUI = {\n      groupsNames: [],\n      members: [],\n      ids: []\n    };\n\n    for (let i in groups) {\n      groupsGUI.groupsNames.push(i);\n      groupsGUI.members.push(groups[i]);\n      let ids = [];\n      for (let j in groups[i]) {\n        ids.push(i + '::' + groups[i][j]);\n      }\n      groupsGUI.ids.push(ids);\n    }\n\n    return groupsGUI;\n  }\n\n  getGroupsNames() {\n    return this.policyEngine.getGroupsNames();\n  }\n\n  removeFromGroup(groupName, user) {\n    this.policyEngine.removeFromGroup(groupName, user);\n  }\n\n  updatePolicy(policyTitle, rule, newDecision, newSubscriptionType) {\n    let userPolicies = this.policyEngine.context.userPolicies;\n    userPolicies[policyTitle].deleteRule(rule);\n    if (!newSubscriptionType) {\n      let type;\n      if (rule.condition.attribute === 'subscription') {\n        type = 'subscription';\n      } else {\n        type = 'simple';\n      }\n      userPolicies[policyTitle].createRule(type, newDecision, rule.condition, rule.scope, rule.target, rule.priority);\n    } else {\n      let operator = (newSubscriptionType === '*') ? 'equals' : 'in';\n      userPolicies[policyTitle].createRule('subscription', newDecision, ['subscription', operator, newSubscriptionType], rule.scope, rule.target, rule.priority);\n    }\n\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n}\n\nexport default PoliciesManager;\n"],"sourceRoot":"/source/"}